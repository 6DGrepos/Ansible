---
- name: List Available Patches
  hosts: all
  gather_facts: false
  tasks:
    - name: Get available updates for RedHat-based systems
      shell: |
        dnf updateinfo list available
      register: dnf_updates_stdout
      ignore_errors: yes
      when: ansible_facts['distribution'] in ['RedHat', 'CentOS', 'Rocky', 'AlmaLinux']

    - name: Check if there are updates for RedHat-based systems
      debug:
        msg: "Updates available: {{ dnf_updates_stdout.stdout }}"
      when: dnf_updates_stdout is defined and dnf_updates_stdout.stdout != ""

    - name: Get available updates for Ubuntu-based systems
      shell: |
        apt list --upgradable
      register: apt_updates_stdout
      ignore_errors: yes
      when: ansible_facts['distribution'] in ['Ubuntu', 'Debian']

    - name: Check if there are updates for Ubuntu-based systems
      debug:
        msg: "Updates available: {{ apt_updates_stdout.stdout }}"
      when: apt_updates_stdout is defined and apt_updates_stdout.stdout != ""

    - name: Format output for each server with headers and footers
      set_fact:
        patch_output: |
          Server: {{ ansible_hostname }}
          Updates:
          {% if ansible_facts['distribution'] in ['RedHat', 'CentOS', 'Rocky', 'AlmaLinux'] %}
            {{ dnf_updates_stdout.stdout if dnf_updates_stdout is defined else 'No updates found' }}
          {% elif ansible_facts['distribution'] in ['Ubuntu', 'Debian'] %}
            {{ apt_updates_stdout.stdout if apt_updates_stdout is defined else 'No updates found' }}
          {% else %}
            Unsupported OS
          {% endif %}

    - name: Save the patch list to file on the target server
      copy:
        content: "{{ patch_output }}"
        dest: "/tmp/available_updates_{{ ansible_hostname }}.txt"

    - name: Transfer patch information to the central backup server
      copy:
        src: "/tmp/available_updates_{{ ansible_hostname }}.txt"
        dest: "/home/svc_aux/backup/patchinformation/patchlist_{{ ansible_hostname }}.txt"
      delegate_to: "10.1.34.26"
      when: ansible_hostname != "10.1.34.26"
