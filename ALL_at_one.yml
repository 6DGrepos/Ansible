---
- name: Gather system information and update central server
  hosts: all
  gather_facts: yes
  tasks:
    - name: Get IP address
      ansible.builtin.set_fact:
        ip_address: "{{ ansible_default_ipv4.address }}"

    - name: Get OS version
      ansible.builtin.set_fact:
        os_version: "{{ ansible_distribution }} {{ ansible_distribution_version }}"

    - name: Get hostname using uname -n
      ansible.builtin.command:
        cmd: uname -n
      register: uname_output

    - name: Set hostname fact
      ansible.builtin.set_fact:
        hostname: "{{ uname_output.stdout }}"

    - name: Format data for CSV
      ansible.builtin.set_fact:
        csv_data: "{{ hostname }},{{ ip_address }},{{ os_version }}"

    - name: Check database services, versions, PHP version, and web services
      shell: |
        for db in oracle db2sysc mysqld mariadbd mongod postgres redis-server cassandra; do
          if pgrep -x $db > /dev/null; then
            echo "$db is running"
          else
            echo "$db is not running"
          fi
        done
      register: db_services

    - name: Get database versions
      shell: |
        if pgrep -x oracle > /dev/null; then
          echo "Oracle DB version: $(sqlplus -v)"
        elif pgrep -x db2sysc > /dev/null; then
          echo "DB2 version: $(db2level)"
        elif pgrep -x mysqld > /dev/null; then
          echo "MySQL version: $(mysql --version)"
        elif pgrep -x mariadbd > /dev/null; then
          echo "MariaDB version: $(mysql --version)"
        elif pgrep -x mongod > /dev/null; then
          echo "MongoDB version: $(mongod --version | grep 'db version' | awk '{print $3}')"
        elif pgrep -x postgres > /dev/null; then
          echo "PostgreSQL version: $(psql --version)"
        elif pgrep -x redis-server > /dev/null; then
          echo "Redis version: $(redis-server --version | awk '{print $3}')"
        elif pgrep -x cassandra > /dev/null; then
          echo "Cassandra version: $(cassandra -v)"
        else
          echo "No database is running"
        fi
      register: db_versions

    - name: Check PHP version
      shell: |
        if command -v php > /dev/null 2>&1; then
          echo "PHP version: $(php -v | grep -oP '^PHP \K[0-9]+\.[0-9]+\.[0-9]+')"
        else
          echo "PHP is not installed on this system."
        fi
      register: php_version

    - name: Check for running web services
      shell: |
        for service in httpd apache2 nginx tomcat lighttpd caddy openresty wildfly jetty glassfish node gunicorn uwsgi; do
          if pgrep -x $service > /dev/null; then
            echo "$service is running"
          else
            echo "$service is not running"
          fi
        done
      register: web_services

    - name: Create or clear output file
      copy:
        content: ""
        dest: "/home/svc_aux/{{ hostname }}.txt"

    - name: Write database information to file
      lineinfile:
        path: "/home/svc_aux/{{ hostname }}.txt"
        line: "{{ item }}"
      with_items:
        - "Database Information:"
        - "---------------------"
        - "{{ db_services.stdout_lines | join('\n') }}"

    - name: Write database versions to file
      lineinfile:
        path: "/home/svc_aux/{{ hostname }}.txt"
        line: "{{ item }}"
      with_items:
        - ""
        - "Database Versions:"
        - "------------------"
        - "{{ db_versions.stdout_lines | join('\n') }}"

    - name: Write PHP version to file
      lineinfile:
        path: "/home/svc_aux/{{ hostname }}.txt"
        line: "{{ item }}"
      with_items:
        - ""
        - "PHP Version:"
        - "------------"
        - "{{ php_version.stdout }}"

    - name: Write web services status to file
      lineinfile:
        path: "/home/svc_aux/{{ hostname }}.txt"
        line: "{{ item }}"
      with_items:
        - ""
        - "Web Services Status:"
        - "--------------------"
        - "{{ web_services.stdout_lines | join('\n') }}"

    - name: Ensure directory exists on central server
      ansible.builtin.file:
        path: /home/svc_aux/backup/All_Servers_information
        state: directory
        mode: '0775'
        owner: root
        group: root
      delegate_to: 10.1.34.26

    - name: Create or truncate CSV file with header
      ansible.builtin.copy:
        content: "Hostname,IP Address,OS Version\n"
        dest: "/home/svc_aux/backup/All_Servers_information/All_server_information.csv"
        mode: '0664'
        owner: svc_aux
        group: svc_aux
      delegate_to: 10.1.34.26

    - name: Append gathered information to CSV file on central server
      ansible.builtin.lineinfile:
        path: "/home/svc_aux/backup/All_Servers_information/All_server_information.csv"
        line: "{{ hostvars[item]['csv_data'] }}"
      loop: "{{ groups['all'] }}"
      when: hostvars[item]['csv_data'] is defined
      delegate_to: 10.1.34.26

- name: Fetch output files to central server
  hosts: all
  tasks:
    - name: Fetch output file from remote server
      ansible.builtin.fetch:
        src: "/home/svc_aux/{{ inventory_hostname }}.txt"
        dest: "/tmp/"
        flat: yes

    - name: Copy output file to central server
      ansible.builtin.copy:
        src: "/tmp/{{ inventory_hostname }}.txt"
        dest: "/home/svc_aux/backup/services_details/{{ inventory_hostname }}.txt"
      delegate_to: 10.1.34.26
