---
- name: Collect command outputs and backup to remote server
  hosts: all
  become: yes
  vars:
    output_dir: "/tmp/command_outputs"
    backup_server: "10.1.128.84"
    backup_path: "/home/svc_aux/backup"
    current_date: "{{ ansible_date_time.date }}"

  tasks:
    - name: Create directory to store outputs on the target server
      file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'

    - name: Execute commands and save output to a log file
      shell: |
        echo "==== Command Output for {{ inventory_hostname }} on {{ current_date }} ====" > {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        echo "==== Process Checks ====" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        ps aux | grep -E 'httpd|nginx|apache2' || echo "httpd/nginx/apache2 not found" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        ps aux | grep postgres || echo "PostgreSQL not found" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log

        echo "==== Service Status ====" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl status apache2.service || echo "Apache2 service not found" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl status nginx || echo "Nginx service not found" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl status mysql || echo "MySQL service not found" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log

        echo "==== Open Ports ====" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        netstat -plant || echo "netstat command not available" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        ss -tuln || echo "ss command not available" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        netstat -plant | grep -i listen || echo "Command not available: netstat for listen" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log

        echo "==== System Services Status ====" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl status mysql || echo "Service not available: mysql" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl status mariadb || echo "Service not available: mariadb" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl status postgresql || echo "Service not available: postgresql" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        lsnrctl status || echo "Service not available: lsnrctl" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl status mongod || echo "Service not available: mongod" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl status mssql-server || echo "Service not available: mssql-server" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl status apache2.service || echo "Service not available: apache2" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl status php-fpm || echo "Service not available: php-fpm" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl list-units --state=running || echo "Command not available: systemctl list-units" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        systemctl list-unit-files || echo "Command not available: systemctl list-unit-files" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log

        echo "==== Web Server Configurations ====" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        grep -R "ServerName" /etc/httpd/ || echo "Command not available: grep ServerName in /etc/httpd/" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        grep -R "ServerName" /etc/apache2/ || echo "Command not available: grep ServerName in /etc/apache2/" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        grep -R "server_name" /etc/nginx/ || echo "Command not available: grep server_name in /etc/nginx/" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        grep DocumentRoot /etc/httpd/conf/httpd.conf || echo "Command not available: grep DocumentRoot in /etc/httpd/" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        grep DocumentRoot /etc/apache2/sites-available/*.conf || echo "Command not available: grep DocumentRoot in /etc/apache2/sites-available/" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        grep root /etc/nginx/sites-available/*.conf || echo "Command not available: grep root in /etc/nginx/sites-available/" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        grep -Ri "DocumentRoot" /etc/apache2/ || echo "Command not available: grep DocumentRoot recursively in /etc/apache2/" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        grep -Ri "server_name" /etc/nginx/ || echo "Command not available: grep server_name recursively in /etc/nginx/" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        grep -Ri "fastcgi_pass" /etc/nginx/ || echo "Command not available: grep fastcgi_pass recursively in /etc/nginx/" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log

        echo "==== PHP Information ====" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        php -v || echo "Command not available: php -v" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        php -m || echo "Command not available: php -m" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        apachectl -M | grep php || echo "Command not available: apachectl for php" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log

        echo "==== Docker Information ====" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        docker ps || echo "Command not available: docker ps" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        docker ps -a || echo "Command not available: docker ps -a" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        docker images -a || echo "Command not available: docker images -a" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        docker images || echo "Command not available: docker images" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log

        echo "==== System Information ====" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        uname -a || echo "Command not available: uname -a" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        ifconfig -a || echo "Command not available: ifconfig -a" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        ip a || echo "Command not available: ip a" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        ip route show || echo "Command not available: ip route show" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        netstat -nr || echo "Command not available: netstat -nr" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        fdisk -l || echo "Command not available: fdisk -l" >> {{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log
        free -m || echo "Command not available: free -m" >> {{ output_dir }}/{{ inventory_hostname }}_{{ current_date }}.log
        df -h || echo "Command not available: df -h" >> {{ output_dir }}/{{ inventory_hostname }}_{{ current_date }}.log
    
- name: Create directory on the Ansible controller for fetched files
  file:
    path: "/tmp/command_outputs"
    state: directory
    mode: '0755'

- name: Fetch logs from target servers and store locally
  fetch:
    src: "{{ output_dir }}/{{ inventory_hostname }}_info_{{ current_date }}.log"
    dest: "/tmp/command_outputs/"
    flat: yes
    fail_on_missing: no

- name: Backup files to remote server
  synchronize:
    src: "/tmp/command_outputs/"
    dest: "{{ backup_path }}"
    mode: push
    host: "{{ backup_server }}"
    recursive: yes
