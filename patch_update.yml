---
- name: Patch Ubuntu servers
  hosts: all
  gather_facts: yes
  become: yes
  tasks:
    - name: Check free space on root filesystem
      command: df -BG /
      register: fs_root
      failed_when: false
      changed_when: false

    - name: Check if root filesystem has sufficient space
      set_fact:
        fs_check_status_root: "{{ 'passed' if (fs_root.stdout | regex_search('(\d+)G') | int) >= 2 else 'failed' }}"

    - name: Check free space on /boot filesystem
      command: df -BG /boot
      register: fs_boot
      failed_when: false
      changed_when: false

    - name: Check if /boot filesystem has sufficient space
      set_fact:
        fs_check_status_boot: "{{ 'passed' if (fs_boot.stdout | regex_search('(\d+)G') | int) >= 1 else 'failed' }}"

    - name: Check free space on /var filesystem
      command: df -BG /var
      register: fs_var
      failed_when: false
      changed_when: false

    - name: Check if /var filesystem has sufficient space
      set_fact:
        fs_check_status_var: "{{ 'passed' if (fs_var.stdout | regex_search('(\d+)G') | int) >= 2 else 'failed' }}"

    - name: Check if apt repositories are valid
      command: apt update
      register: apt_check
      failed_when: false
      changed_when: false

    - name: Set repository check status
      set_fact:
        repo_check_status: "{{ 'passed' if apt_check.rc == 0 else 'failed' }}"

    - name: List updated patches
      command: apt list --upgradable
      register: patch_list
      failed_when: false
      changed_when: false

    - name: Set patch status
      set_fact:
        patch_status: "{{ 'success' if patch_list.stdout else 'no_new_patches' }}"

    - name: List the patches that are updated
      set_fact:
        updated_patches: "{{ patch_list.stdout | regex_findall('([a-zA-Z0-9\-\.]+)') }}"
      when: patch_status == 'success'

    - name: Patch the server
      apt:
        upgrade: dist
        update_cache: yes

    - name: Check if reboot is required
      command: checkrestart
      register: reboot_check
      failed_when: false
      changed_when: false
      ignore_errors: yes

    - name: Set reboot status
      set_fact:
        reboot_required: "{{ 'yes' if reboot_check.stdout and 'Found' in reboot_check.stdout else 'no' }}"

    - name: Collect all status and save to a file
      block:
        - name: Prepare final status for the host
          set_fact:
            host_status: |
              Hostname: {{ ansible_facts['hostname'] }} ;
              Filesystem Check: {{ fs_check_status_root }} | {{ fs_check_status_boot }} | {{ fs_check_status_var }} ;
              Repository Check: {{ repo_check_status }} ;
              Patch Status: {{ patch_status }} ;
              List of Updated Patches: {{ updated_patches | join(', ') }} ;
              Reboot Required: {{ reboot_required }}

        - name: Save results to file
          copy:
            dest: "/home/svc_aux/backup/patchstatus/patchstatus.csv"
            content: |
              Hostname,Filesystem Check,Repository Check,Patch Status,Updated Patches,Reboot Required
              {{ ansible_facts['hostname'] }},{{ fs_check_status_root }}|{{ fs_check_status_boot }}|{{ fs_check_status_var }},{{ repo_check_status }},{{ patch_status }},{{ updated_patches | join(', ') }},{{ reboot_required }}
            append: yes
          delegate_to: localhost

    - name: Print final status message
      debug:
        msg: "Status for {{ ansible_facts['hostname'] }} has been logged successfully"
