- name: Gather system and service information
  hosts: all
  gather_facts: yes
  become: yes
  tasks:
    - name: Get IP address
      ansible.builtin.set_fact:
        ip_address: "{{ ansible_default_ipv4.address }}"

    - name: Get OS version
      ansible.builtin.set_fact:
        os_version: "{{ ansible_distribution }} {{ ansible_distribution_version }}"

    - name: Get hostname
      ansible.builtin.command:
        cmd: hostname
      register: uname_output

    - name: Set hostname fact
      ansible.builtin.set_fact:
        hostname: "{{ uname_output.stdout }}"

    - name: Check for running database services
      shell: |
        for db in oracle db2sysc mysqld mariadbd mongod postgres redis-server cassandra; do
          if pgrep -x $db > /dev/null; then
            echo "$db is running"
          fi
        done
      register: db_services

    - name: Set database services status
      ansible.builtin.set_fact:
        db_services_status: "{{ db_services.stdout if db_services.stdout else 'No database is running on this server' }}"

    - name: Check PHP version
      shell: |
        if command -v php > /dev/null 2>&1; then
          php -v | grep -oP '^PHP \K[0-9]+\.[0-9]+\.[0-9]+'
        else
          echo "PHP is not installed on this system."
        fi
      register: php_version

    - name: Check for running web services
      shell: |
        for service in httpd apache2 nginx tomcat lighttpd caddy openresty wildfly jetty glassfish node gunicorn uwsgi; do
          if pgrep -x $service > /dev/null; then
            echo "$service is running"
          fi
        done
      register: web_services

    - name: Set web services status
      ansible.builtin.set_fact:
        web_services_status: "{{ web_services.stdout if web_services.stdout else 'No web services are running' }}"

    - name: Collect all running services
      shell: systemctl list-units --type=service --state=running --no-pager | awk 'NR>1 {print $1}'
      register: running_services

    - name: Prepare CSV data
      ansible.builtin.set_fact:
        csv_data: |
          {{ hostname }},{{ ip_address }},{{ os_version }},
          "{{ db_services_status }}",
          "{{ php_version.stdout if php_version.stdout else 'PHP is not installed' }}",
          "{{ web_services_status }}",
          "{{ running_services.stdout if running_services.stdout else 'No running services found' }}"

    - name: Create or truncate output file
      ansible.builtin.copy:
        content: ""
        dest: "/home/svc_aux/{{ hostname }}.txt"

    - name: Write gathered information to file
      blockinfile:
        path: "/home/svc_aux/{{ hostname }}.txt"
        block: |
          Database Information:
          ---------------------
          {{ db_services_status }}

          PHP Version:
          ------------
          {{ php_version.stdout if php_version.stdout else 'PHP is not installed' }}

          Web Services Status:
          --------------------
          {{ web_services_status }}

          Running Services:
          -----------------
          {{ running_services.stdout if running_services.stdout else 'No running services found' }}

- name: Update central CSV file
  hosts: 10.1.34.26
  become: yes
  tasks:
    - name: Ensure directory exists
      ansible.builtin.file:
        path: /home/svc_aux/backup/All_Servers_information
        state: directory
        mode: '0775'
        owner: root
        group: root

    - name: Append gathered information to CSV file
      lineinfile:
        path: "/home/svc_aux/backup/All_Servers_information/All_server_information.csv"
        create: yes
        line: "{{ hostvars[item]['csv_data'] }}"
      loop: "{{ groups['all'] }}"
      when: hostvars[item]['csv_data'] is defined

- name: Save running services before reboot
  hosts: all
  tasks:
    - name: Gather FQDN
      ansible.builtin.command: hostname -f
      register: fqdn_output

    - name: Create directory for FQDN
      ansible.builtin.file:
        path: "/home/svc_aux/backup/files/{{ fqdn_output.stdout }}"
        state: directory
      delegate_to: 10.1.34.26

    - name: Collect running services before reboot
      shell: systemctl list-units --type=service --state=running --no-pager | awk 'NR>1 {print $1}'
      register: running_services_before_reboot

    - name: Save running services before reboot to file
      ansible.builtin.copy:
        content: "{{ running_services_before_reboot.stdout }}"
        dest: "/home/svc_aux/backup/files/{{ fqdn_output.stdout }}/running_services_before_reboot.txt"
      delegate_to: 10.1.34.26

- name: Execute Python script
  hosts: 10.1.34.26
  become: yes
  tasks:
    - name: Run Python script
      command:
        cmd: python3 /home/svc_aux/backup/All_Servers_information/convert_html.py
