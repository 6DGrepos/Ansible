---
- name: Gather system and service information and create CSV
  hosts: all
  gather_facts: yes
  become: yes
  tasks:
    - name: Get IP address
      ansible.builtin.set_fact:
        ip_address: "{{ ansible_default_ipv4.address }}"

    - name: Get OS version
      ansible.builtin.set_fact:
        os_version: "{{ ansible_distribution }} {{ ansible_distribution_version }}"

    - name: Get hostname using uname -n
      ansible.builtin.command:
        cmd: uname -n
      register: uname_output

    - name: Set hostname fact
      ansible.builtin.set_fact:
        hostname: "{{ uname_output.stdout }}"

    - name: Check for running database services
      ansible.builtin.shell: |
        for db in oracle db2sysc mysqld mariadbd mongod postgres redis-server cassandra; do
          if pgrep -x $db > /dev/null; then
            echo "$db is running"
          fi
        done
      register: db_services

    - name: Set database services status if none are running
      ansible.builtin.set_fact:
        db_services_status: "{{ db_services.stdout if db_services.stdout else 'No database is running on this server' }}"

    - name: Get database versions
      ansible.builtin.shell: |
        if pgrep -x oracle > /dev/null; then
          echo "Oracle DB version: $(sqlplus -v)"
        elif pgrep -x db2sysc > /dev/null; then
          echo "DB2 version: $(db2level)"
        elif pgrep -x mysqld > /dev/null; then
          echo "MySQL version: $(mysql --version)"
        elif pgrep -x mariadbd > /dev/null; then
          echo "MariaDB version: $(mysql --version)"
        elif pgrep -x mongod > /dev/null; then
          echo "MongoDB version: $(mongod --version | grep 'db version' | awk '{print $3}')"
        elif pgrep -x postgres > /dev/null; then
          echo "PostgreSQL version: $(psql --version)"
        elif pgrep -x redis-server > /dev/null; then
          echo "Redis version: $(redis-server --version | awk '{print $3}')"
        elif pgrep -x cassandra > /dev/null; then
          echo "Cassandra version: $(cassandra -v)"
        else
          echo "No database version found"
        fi
      register: db_versions

    - name: Check PHP version
      ansible.builtin.shell: |
        if command -v php > /dev/null 2>&1; then
          echo "PHP version: $(php -v | grep -oP '^PHP \K[0-9]+\.[0-9]+\.[0-9]+')"
        else
          echo "PHP is not installed on this system."
        fi
      register: php_version

    - name: Check for running web services
      ansible.builtin.shell: |
        for service in httpd apache2 nginx tomcat lighttpd caddy openresty wildfly jetty glassfish node gunicorn uwsgi; do
          if pgrep -x $service > /dev/null; then
            echo "$service is running"
          fi
        done
      register: web_services

    - name: Set web services status if none are running
      ansible.builtin.set_fact:
        web_services_status: "{{ web_services.stdout if web_services.stdout else 'No web services are running' }}"

    - name: Collect all running services
      ansible.builtin.shell: systemctl list-units --type=service --state=running | awk 'NR>1 && $1 !~ /^(LOAD|ACTIVE|SUB)$/ {print $1}' | awk 'NF > 0'
      register: running_services

    - name: Format data for CSV
      ansible.builtin.set_fact:
        csv_data: "{{ hostname }},{{ ip_address }},{{ os_version }},\"{{ db_services_status }}\",\"{{ db_versions.stdout | default('No database version found') }}\",{{ php_version.stdout | default('PHP is not installed') }},\"{{ web_services_status }}\",\"{{ running_services.stdout | default('No running services found') }}\""

    - name: Create or clear output file for CSV data
      ansible.builtin.copy:
        content: ""
        dest: "/home/svc_aux/{{ hostname }}.csv"

    - name: Write data to CSV file
      ansible.builtin.lineinfile:
        path: "/home/svc_aux/{{ hostname }}.csv"
        line: "{{ csv_data }}"
      
    # Ensure the CSV file is created before proceeding to the next step.
    - name: Wait for CSV file to be fully written (optional)
      ansible.builtin.wait_for:
        path: "/home/svc_aux/{{ hostname }}.csv"
        state: present

- name: Run Python script to process CSV file 
  hosts: localhost  # Change this to the appropriate host where the script should run.
  tasks:
    - name: Create Python script to process CSV file 
      ansible.builtin.copy:
        content: |
          import pandas as pd 
          import sys 

          csv_file = sys.argv[1] 
          html_file = '/home/svc_aux/data.html'

          max_attempts = 5 
          delay = 10 

          for attempt in range(max_attempts): 
              try:
                  df = pd.read_csv(csv_file) 
                  html_content = df.to_html(index=False) 
                  with open(html_file, 'w') as f:
                      f.write(html_content) 
                  print(f"HTML file created successfully at {html_file}") 
                  break 
              except Exception as e:
                  print(f"Attempt {attempt + 1} failed with error: {str(e)}") 
                  if attempt < max_attempts - 1:
                      print(f"Retrying in {delay} seconds...") 
                      time.sleep(delay) 
                  else:
                      print("Max attempts reached. Exiting.") 
                      sys.exit(1)

        dest: "/home/svc_aux/process_csv.py"
        mode: '0755'

    # Run the Python script after the CSV has been created.
    - name: Run Python script to convert CSV to HTML 
      ansible.builtin.command:
        cmd: python3 /home/svc_aux/process_csv.py /home/svc_aux/{{ hostname }}.csv 
      register: script_output 

    # Display output of the Python script execution.
    - name: Display Python script output 
      ansible.builtin.debug:
        msg:
          - "stdout:\n{{ script_output.stdout }}"
          - "stderr:\n{{ script_output.stderr }}"
