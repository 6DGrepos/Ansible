---
- name: Patch Ubuntu Servers with Filesystem Checks
  hosts: ubuntu_servers
  become: yes
  vars:
    min_disk_space_mb: 1000  # Minimum required disk space in MB
    csv_file_path: "/home/svc_aux/backup/patchstatus/patch_status.csv"

  tasks:
    - name: Ensure CSV file exists
      file:
        path: "{{ csv_file_path }}"
        state: touch
        mode: '0644'

    - name: Check root disk space
      shell: "df --output=avail / | tail -n 1"
      register: root_disk_space
      failed_when: root_disk_space.stdout | int < min_disk_space_mb
      ignore_errors: yes

    - name: Check var disk space
      shell: "df --output=avail /var | tail -n 1"
      register: var_disk_space
      failed_when: var_disk_space.stdout | int < min_disk_space_mb
      ignore_errors: yes

    - name: Check boot disk space
      shell: "df --output=avail /boot | tail -n 1"
      register: boot_disk_space
      failed_when: boot_disk_space.stdout | int < min_disk_space_mb
      ignore_errors: yes

    - name: Validate repositories
      shell: "apt-get update"
      register: repo_status
      ignore_errors: yes

    - name: Apply patches
      apt:
        upgrade: dist
      register: patch_result
      ignore_errors: yes
      when: 
        - root_disk_space.stdout | int >= min_disk_space_mb
        - var_disk_space.stdout | int >= min_disk_space_mb
        - boot_disk_space.stdout | int >= min_disk_space_mb
        - repo_status.rc == 0

    - name: Check if reboot is required
      shell: "if [ -f /var/run/reboot-required ]; then echo yes; else echo no; fi"
      register: reboot_required
      changed_when: false

    - name: Record patch status to CSV file
      shell: |
        echo "{{ inventory_hostname }},
        Root_Disk: {{ root_disk_space.stdout.strip() | int >= min_disk_space_mb | ternary('SUCCESS', 'FAILED') }},
        Var_Disk: {{ var_disk_space.stdout.strip() | int >= min_disk_space_mb | ternary('SUCCESS', 'FAILED') }},
        Boot_Disk: {{ boot_disk_space.stdout.strip() | int >= min_disk_space_mb | ternary('SUCCESS', 'FAILED') }},
        Repo_Status: {{ repo_status.rc == 0 | ternary('SUCCESS', 'FAILED') }},
        Patch_Status: {{ patch_result is failed | ternary('FAILED', 'SUCCESS') }},
        Reboot_Required: {{ reboot_required.stdout.strip() }},
        Message: {{ patch_result.msg | default('') }}" >> {{ csv_file_path }}
      ignore_errors: no
