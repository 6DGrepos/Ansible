---
- name: Patch Ubuntu Servers
  hosts: all
  become: true
  tasks:

    - name: Check available free space on root filesystem (/)
      command: df -h /
      register: disk_space_root
      failed_when: false

    - name: Check available free space on /boot filesystem
      command: df -h /boot
      register: disk_space_boot
      failed_when: false

    - name: Check available free space on /var filesystem
      command: df -h /var
      register: disk_space_var
      failed_when: false

    - name: Parse available space on root filesystem
      set_fact:
        available_space_root: "{{ disk_space_root.stdout_lines[1].split()[3] }}"

    - name: Parse available space on /boot filesystem
      set_fact:
        available_space_boot: "{{ disk_space_boot.stdout_lines[1].split()[3] }}"

    - name: Parse available space on /var filesystem
      set_fact:
        available_space_var: "{{ disk_space_var.stdout_lines[1].split()[3] }}"

    - name: Check if root filesystem has sufficient space
      set_fact:
        fs_check_status_root: "{{ 'passed' if (available_space_root | regex_search('(\d+\.?\d*)G') | int) >= 2 else 'failed' }}"

    - name: Check if /boot filesystem has sufficient space
      set_fact:
        fs_check_status_boot: "{{ 'passed' if (available_space_boot | regex_search('(\d+\.?\d*)G') | int) >= 1 else 'failed' }}"

    - name: Check if /var filesystem has sufficient space
      set_fact:
        fs_check_status_var: "{{ 'passed' if (available_space_var | regex_search('(\d+\.?\d*)G') | int) >= 2 else 'failed' }}"

    - name: Fail if insufficient space on root filesystem (/)
      fail:
        msg: "Insufficient space on root filesystem (/). Available space: {{ available_space_root }}. Please free up space before proceeding."
      when: fs_check_status_root == "failed"

    - name: Fail if insufficient space on /boot filesystem
      fail:
        msg: "Insufficient space on /boot filesystem. Available space: {{ available_space_boot }}. Please free up space before proceeding."
      when: fs_check_status_boot == "failed"

    - name: Fail if insufficient space on /var filesystem
      fail:
        msg: "Insufficient space on /var filesystem. Available space: {{ available_space_var }}. Please free up space before proceeding."
      when: fs_check_status_var == "failed"

    - name: Check if all APT repositories are valid
      apt:
        update_cache: yes
      register: apt_update
      failed_when: apt_update.rc != 0
      ignore_errors: yes

    - name: Set repository check status
      set_fact:
        repo_check_status: "{{ 'passed' if apt_update.rc == 0 else 'failed' }}"

    - name: Fail if repository check fails
      fail:
        msg: "One or more repositories are not accessible or valid."
      when: repo_check_status == "failed"

    - name: Perform system update and patching
      apt:
        upgrade: dist
        update_cache: yes
        cache_valid_time: 3600
      register: apt_upgrade
      notify:
        - check if reboot is required

    - name: Capture list of updated packages
      command: dpkg -l | grep '^ii' | awk '{print $2}' 
      register: updated_packages
      when: apt_upgrade.changed

    - name: Display message if patches were applied
      debug:
        msg: "Patches were successfully applied to the system."

    - name: Check if a reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required
      failed_when: false

    - name: Notify if reboot is required
      debug:
        msg: "Reboot is required after patching the server."
      when: reboot_required.stat.exists == true

    - name: Create patch status log in CSV format
      shell: |
        echo "Hostname,Filesystem check,Repository Check status,Patch status,List of updated patches,Reboot required" > /home/svc_aux/backup/patchstatus/patchstatus.csv
        echo "$(hostname -s),{{ fs_check_status_root }} {{ fs_check_status_boot }} {{ fs_check_status_var }},{{ repo_check_status }},{{ apt_upgrade.msg }},{{ updated_packages.stdout }},{{ 'yes' if reboot_required.stat.exists == true else 'no' }}" >> /home/svc_aux/backup/patchstatus/patchstatus.csv
      delegate_to: 10.1.34.26
      when: apt_upgrade.changed

  handlers:
    - name: check if reboot is required
      command: needs-restarting
      register: reboot_check
      failed_when: false
      ignore_errors: true

    - name: Reboot the server if required
      reboot:
        msg: "Rebooting server as patches applied require a reboot."
      when: reboot_check.rc == 1
      async: 1
      poll: 0
