---
- name: List available patches for Linux servers
  hosts: all
  become: yes
  vars:
    remote_server: "10.1.34.26"
    remote_path: "/home/svc_aux/backup/patchinformation/patchlist.csv"
  tasks:
    - name: Identify the Linux distribution
      ansible.builtin.shell: |
        if [ -f /etc/os-release ]; then
          . /etc/os-release && echo $ID
        else
          echo "unknown"
        fi
      register: distro
      changed_when: false

    - name: List available updates for Red Hat-based systems
      when: distro.stdout in ["rhel", "centos", "rocky", "almalinux"]
      ansible.builtin.shell: |
        if command -v dnf > /dev/null 2>&1; then
          dnf check-update --quiet
        else
          yum check-update --quiet
        fi
      register: redhat_updates
      failed_when: redhat_updates.rc not in [0, 100]
      changed_when: false

    - name: List available updates for Debian-based systems
      when: distro.stdout in ["debian", "ubuntu"]
      ansible.builtin.shell: |
        apt update -qq && apt list --upgradable 2>/dev/null | grep -v '^Listing'
      register: debian_updates
      failed_when: false
      changed_when: false

    - name: Clear the remote CSV file
      ansible.builtin.file:
        path: "{{ remote_path }}"
        state: absent
      delegate_to: "{{ remote_server }}"
      run_once: true

    - name: Create the remote CSV file with headers
      ansible.builtin.copy:
        content: "Hostname,Package,Current Version,Available Version\n"
        dest: "{{ remote_path }}"
        mode: '0644'
      delegate_to: "{{ remote_server }}"
      run_once: true

    - name: Append patch information to the remote CSV file
      ansible.builtin.lineinfile:
        path: "{{ remote_path }}"
        line: "{{ item }}"
        insertafter: EOF
      delegate_to: "{{ remote_server }}"
      with_items:
        - "{{ inventory_hostname }} ({{ ansible_facts.hostname }})"
        - "{% if distro.stdout in ['rhel', 'centos', 'rocky', 'almalinux'] %}"
        - "{% for line in redhat_updates.stdout_lines %}"
        - "{{ inventory_hostname }},{{ line.split()[0] }},{{ line.split()[1] }},{{ line.split()[2] }}"
        - "{% endfor %}"
        - "{% elif distro.stdout in ['debian', 'ubuntu'] %}"
        - "{% for line in debian_updates.stdout_lines %}"
        - "{{ inventory_hostname }},{{ line.split()[0].split('/')[0] }},{{ line.split()[1] }},{{ line.split()[5] }}"
        - "{% endfor %}"
        - "{% else %}"
        - "{{ inventory_hostname }},Unsupported Linux Distribution ({{ distro.stdout }}),,,"
        - "{% endif %}"
        - ""
